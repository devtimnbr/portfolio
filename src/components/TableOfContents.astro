---
interface Props {
    headers: { depth: number; slug: string; text: string }[]
}

const { headers } = Astro.props

interface Item {
    depth: number
    slug: string
    text: string
    subheadings?: Item[]
}

function convert(headers: Item[], maxDepth: number): Item[] {
    const items: Item[] = []

    for (let i = 0; i < headers.length; i++) {
        const currentDepth = headers[i].depth
        const nextDepth = i + 1 < headers.length ? headers[i + 1].depth : 0

        if (nextDepth > currentDepth && currentDepth <= maxDepth) {
            let endIndex = i + 1
            while (endIndex < headers.length && headers[endIndex].depth > currentDepth) {
                endIndex++
            }

            const subheadings = convert(headers.slice(i + 1, endIndex), maxDepth)
            items.push({ ...headers[i], subheadings })

            i = endIndex - 1
        } else if (currentDepth <= maxDepth) {
            items.push({ ...headers[i], subheadings: [] })
        }
    }

    return items
}

const converted = convert(
    headers.map((el) => ({ ...el, subheadings: [] })),
    2
)
---

<ol>
    {
        /* TO-DO: convert number display to vanilla html/css instead of this workaround (in a rush for ravetheplanet) */
        converted.map((el, i) => (
            <li class="m-0 flex p-0">
                <a class="flex space-x-2" href={`#${el.slug}`}>
                    <span class="block">{i}.</span>
                    <span class="underline">{el.text}</span>
                </a>

                {el.subheadings && (
                    <div class="ml-8">
                        <Astro.self headers={el.subheadings} />
                    </div>
                )}
            </li>
        ))
    }
</ol>
