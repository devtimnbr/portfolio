---
interface Props {
    headers: { depth: number; slug: string; text: string }[]
}

const { headers } = Astro.props

const a = [
    {
        depth: 2,
        slug: 'understanding-bitcoin',
        text: 'Understanding Bitcoin',
    },
    {
        depth: 2,
        slug: 'the-proof-of-work-concept',
        text: 'The Proof-of-Work Concept',
    },
    {
        depth: 2,
        slug: 'convergence-of-physical-and-digital-realities',
        text: 'Convergence of Physical and Digital Realities',
    },
    {
        depth: 3,
        slug: 'exploring-the-concept-of-digital-reality',
        text: 'Exploring the Concept of Digital Reality',
    },
    {
        depth: 3,
        slug: 'bitcoin-as-a-bridge',
        text: 'Bitcoin as a Bridge',
    },
    {
        depth: 3,
        slug: 'pows-contribution-to-digital-reality',
        text: 'PoW’s Contribution to Digital Reality',
    },
    {
        depth: 3,
        slug: 'redefining-trust-and-security',
        text: 'Redefining Trust and Security',
    },
    {
        depth: 3,
        slug: 'empowering-financial-inclusion',
        text: 'Empowering Financial Inclusion',
    },
    {
        depth: 3,
        slug: 'challenges-and-future-development',
        text: 'Challenges and Future Development',
    },
    {
        depth: 2,
        slug: 'security-and-trust-in-bitcoins-digital-reality',
        text: 'Security and Trust in Bitcoin’s Digital Reality',
    },
]

const b = [
    {
        depth: 2,
        slug: 'understanding-bitcoin',
        text: 'Understanding Bitcoin',
        subheadings: [],
    },
    {
        depth: 2,
        slug: 'the-proof-of-work-concept',
        text: 'The Proof-of-Work Concept',
        subheadings: [],
    },
    {
        depth: 2,
        slug: 'convergence-of-physical-and-digital-realities',
        text: 'Convergence of Physical and Digital Realities',
        subheadings: [
            {
                depth: 3,
                slug: 'exploring-the-concept-of-digital-reality',
                text: 'Exploring the Concept of Digital Reality',
                subheadings: [],
            },
            {
                depth: 3,
                slug: 'bitcoin-as-a-bridge',
                text: 'Bitcoin as a Bridge',
                subheadings: [],
            },
            {
                depth: 3,
                slug: 'pows-contribution-to-digital-reality',
                text: 'PoW’s Contribution to Digital Reality',
                subheadings: [],
            },
            {
                depth: 3,
                slug: 'redefining-trust-and-security',
                text: 'Redefining Trust and Security',
                subheadings: [],
            },
            {
                depth: 3,
                slug: 'empowering-financial-inclusion',
                text: 'Empowering Financial Inclusion',
                subheadings: [],
            },
            {
                depth: 3,
                slug: 'challenges-and-future-development',
                text: 'Challenges and Future Development',
                subheadings: [],
            },
        ],
    },
    {
        depth: 2,
        slug: 'security-and-trust-in-bitcoins-digital-reality',
        text: 'Security and Trust in Bitcoin’s Digital Reality',
    },
]

interface Item {
    depth: number
    slug: string
    text: string
    subheadings?: Item[]
}

// get
/* function convert(headers: Item[]): Item[] {
    const items: Item[] = []

    for (let i = 0; i < headers.length; i++) {
        const currentDepth = headers[i].depth
        const nextDepth = i + 1 < headers.length ? headers[i + 1].depth : 0

        if (nextDepth > currentDepth) {
            let endIndex = i + 1
            while (endIndex < headers.length && headers[endIndex].depth > currentDepth) {
                endIndex++
            }

            const subheadings = convert(headers.slice(i + 1, endIndex))
            items.push({ ...headers[i], subheadings })

            i = endIndex - 1
        } else {
            items.push({ ...headers[i], subheadings: [] })
        }
    }

    return items
} */

function convert(headers: Item[], maxDepth: number): Item[] {
    const items: Item[] = []

    for (let i = 0; i < headers.length; i++) {
        const currentDepth = headers[i].depth
        const nextDepth = i + 1 < headers.length ? headers[i + 1].depth : 0

        if (nextDepth > currentDepth && currentDepth <= maxDepth) {
            let endIndex = i + 1
            while (endIndex < headers.length && headers[endIndex].depth > currentDepth) {
                endIndex++
            }

            const subheadings = convert(headers.slice(i + 1, endIndex), maxDepth)
            items.push({ ...headers[i], subheadings })

            i = endIndex - 1
        } else if (currentDepth <= maxDepth) {
            items.push({ ...headers[i], subheadings: [] })
        }
    }

    return items
}

/* 
function convertHeaders(a) {
    const b = []
    let currentParent = null as any

    a.forEach((header) => {
        const { depth, slug, text } = header
        const transformedHeader = { depth, slug, text, subheadings: [] }

        if (!currentParent || depth === currentParent.depth) {
            b.push(transformedHeader)
            currentParent = transformedHeader
        } else if (depth > currentParent.depth) {
            currentParent.subheadings.push(transformedHeader)
            currentParent = transformedHeader
        } else {
            while (currentParent && depth <= currentParent.depth) {
                currentParent = currentParent.parent
            }
            if (currentParent) {
                currentParent.subheadings.push(transformedHeader)
                currentParent = transformedHeader
            } else {
                b.push(transformedHeader)
                currentParent = transformedHeader
            }
        }

        transformedHeader.parent = currentParent
    })

    return b
}

console.log({ transformed: convertHeaders(headers) }) */

const converted = convert(
    headers.map((el) => ({ ...el, subheadings: [] })),
    2
)
---

<ol>
    {
        /* TO-DO: convert number display to vanilla html/css instead of this workaround (in a rush for ravetheplanet) */
        converted.map((el, i) => (
            <li class="m-0 flex p-0">
                <a class="flex space-x-2" href={`#${el.slug}`}>
                    <span class="block">{i}.</span>
                    <span class="underline">{el.text}</span>
                </a>

                {el.subheadings && (
                    <div class="ml-8">
                        <Astro.self headers={el.subheadings} />
                    </div>
                )}
            </li>
        ))
    }
    <!--     {
        converted.map((header) => (
            <li>
                <a class="underline" href={`#${header.slug}`}>
                    {header.text}
                </a>
                {header.subheadings && <Astro.self headers={header} />}
            </li>
        ))
    } -->
</ol>
